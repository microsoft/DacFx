name: pr-validation

on: pull_request

env:
  LATEST_DOTNET_VERSION: 10.x

jobs:
  # Test SDK builds with dotnet command, on multiple platforms and .NET versions.
  dotnetTest:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        targetFramework: [net8.0, net9.0, net10.0]
        include:
          - targetFramework: net8.0
            dotnetVersion: 8.x
          - targetFramework: net9.0
            dotnetVersion: 9.x
          - targetFramework: net10.0
            dotnetVersion: 10.x
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup .NET ${{ env.LATEST_DOTNET_VERSION }}
      uses: actions/setup-dotnet@v4  # Latest version is always required
      with:
        dotnet-version: ${{ env.LATEST_DOTNET_VERSION }}
        dotnet-quality: preview
    - name: Setup .NET ${{ matrix.dotnetVersion }}
      if: ${{ matrix.dotnetVersion != env.LATEST_DOTNET_VERSION }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnetVersion }}
        dotnet-quality: ga
    - run: dotnet build DacFx.sln
    - run: dotnet test DacFx.sln --no-build -f ${{ matrix.targetFramework }}
  
  # Test SDK builds with full framework MSBuild on Windows, with SDK itself and against SSDT installation.
  msbuildTest:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        buildType: [SDK, SSDT]
        include:
          - buildType: SSDT
            env:
              BUILD_FROM_SSDT: true
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup .NET ${{ env.LATEST_DOTNET_VERSION }}
      uses: actions/setup-dotnet@v4  # Latest version is always required
      with:
        dotnet-version: ${{ env.LATEST_DOTNET_VERSION }}
        dotnet-quality: preview
    - run: dotnet build DacFx.sln
    - run: dotnet test DacFx.sln --no-build -f net472