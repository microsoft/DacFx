trigger: none

pr: none

# Pipeline trigger - this pipeline will run whenever the 'DacFx-Official' pipeline finishes
resources:
  pipelines:
  - pipeline: 'latest-nuget-build-test'
    source: 'DacFx-Official'
    trigger: true

variables:
  solution: '**/*.sln'
  configuration: 'Debug'
  dacFxPackagePattern: 'Microsoft.SqlServer.DacFx*.nupkg'
  dacFxPackagePath: '$(Pipeline.Workspace)/pkg'  # DacFx nupkg will be downloaded from nightly build and placed here

stages:
- stage: Build
  displayName: 'Nightly Build Test'

  jobs:
  - job: BuildTest
    displayName: 'Build and Test on'

    # Verifies cross-platform build and test
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-latest'
        mac:
          imageName: 'macos-latest'
        windows:
          imageName: 'windows-latest'

    pool:
      vmImage: '$(imageName)'

    workspace:
      clean: all

    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Pipeline Artifact'
      inputs:
        buildType: 'specific'
        project: '$(azureProjectId)'
        definition: '$(azureSourcePipelineId)'
        buildVersionToDownload: 'latest'
        itemPattern: 'drop_build_main/release/$(dacFxPackagePattern)'
        targetPath: '$(dacFxPackagePath)'
    
    # Note: The download task above preserves the relative folder structure
    - script: 'dotnet nuget add source "$(dacFxPackagePath)/drop_build_main/release"'
      displayName: 'Nuget Add Source to Path Containing DacFx Package'

    - task: PowerShell@2
      displayName: 'Extract Version from DacFx nupkg file'
      inputs:
        failOnStderr: true
        targetType: 'inline'
        script: |
          # Locate the nupkg file from the package path
          $files =  Get-ChildItem "$(dacFxPackagePath)" -Recurse -Include "$(dacFxPackagePattern)"
          Write-Host "DacFx package found in $files"
          if ($files.length -eq 0) {
            Write-Error "Failed to find Nuget package with pattern $(dacFxPackagePattern) in $(dacFxPackagePath)"
          }

          # Parse the nupkg file name for the version number
          $filename = Split-Path $files[0] -leaf
          $version = $filename.Replace("Microsoft.SqlServer.DacFx.", "").Replace(".nupkg", "")
          Write-Host "DacFx package version: $version"
          Write-Host "##vso[task.setvariable variable=dacFxPackageVersion]$version"

    - template: 'template-steps-build-test.yml'
      parameters:
        solution: '$(solution)'
        configuration: '$(configuration)'
        nugetVersion: '1.0.0'
        runCodeSign: 'false'
        dacFxPackageVersionArgument: '-p:DacFxPackageVersion="$(dacFxPackageVersion)"'