<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the MIT license.
-->
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <LanguageTargets Condition=" '$(LanguageTargets)' == ''">$(MSBuildToolsPath)\Microsoft.Common.targets</LanguageTargets>
    <MSBuildAllProjects Condition="'$(MSBuildToolsVersion)' != 'Current'">$(MSBuildAllProjects);$(MsBuildThisFileFullPath)</MSBuildAllProjects>
    <IncludeBuildOutput Condition="'$(IncludeBuildOutput)' == ''">false</IncludeBuildOutput>

    <!-- For CPS/VS support. See https://github.com/dotnet/project-system/blob/master/src/Microsoft.VisualStudio.ProjectSystem.Managed/ProjectSystem/DesignTimeTargets/Microsoft.Managed.DesignTime.targets#L60 -->
    <CustomBeforeMicrosoftCommonTargets Condition="'$(ManagedLanguageTargetsGotImported)' == '' And Exists('$(MSBuildExtensionsPath)\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets')">$(CustomBeforeMicrosoftCommonTargets);$(MSBuildExtensionsPath)\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets</CustomBeforeMicrosoftCommonTargets>
  </PropertyGroup>
  
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" Condition=" '$(CommonTargetsPath)' == '' " />

  <PropertyGroup>
    <!-- This property must be overridden to remove a few targets that compile assemblies -->
    <CoreBuildDependsOn>
      BuildOnlySettings;
      PrepareForBuild;
      PreBuildEvent;
      ResolveReferences;
      Compile;
      GetTargetPath;
      PrepareForRun;
      IncrementalClean;
      PostBuildEvent
    </CoreBuildDependsOn>
    
    <!-- Disable symbol generation -->
    <DebugType>None</DebugType>
    <DebugSymbols>false</DebugSymbols>
    
    <!-- Don't emit a reference assembly -->
    <ProduceReferenceAssembly>false</ProduceReferenceAssembly>

    <!-- Mark language targets as imported -->
    <LanguageTargetsImported>true</LanguageTargetsImported>

    <!-- Default language to C# mainly for code analyzer packages -->
    <Language>C#</Language>
  </PropertyGroup>
  
  <!-- Clear output group items which are read by the IDE and NuGet. -->
  <ItemGroup>
    <BuiltProjectOutputGroupKeyOutput Remove="@(BuiltProjectOutputGroupKeyOutput)" />
    <DebugSymbolsProjectOutputGroupOutput Remove="@(DebugSymbolsProjectOutputGroupOutput)" />
    <IntermediateAssembly Remove="@(IntermediateAssembly)" />
    <IntermediateRefAssembly Remove="@(IntermediateRefAssembly)" />
    <Reference Remove="mscorlib" />
  </ItemGroup>
  
  <!--
    The CopyFilesToOutputDirectory target is hard coded to depend on ComputeIntermediateSatelliteAssemblies.  Database projects do no generate resource assemblies
    so the target is replaced with a no-op
  -->
  <Target Name="ComputeIntermediateSatelliteAssemblies" />

  <!--
    The GetReferenceAssemblyPaths does not need to run since reference assemblies aren't needed.
  -->
  <Target Name="GetFrameworkPaths" DependsOnTargets="$(GetFrameworkPathsDependsOn)" />
  <Target Name="GetReferenceAssemblyPaths" DependsOnTargets="$(GetReferenceAssemblyPathsDependsOn)" />
  
  <!-- 
    Microsoft.Managed.Targets is imported by the managed language target files in MSBuild 16.0 and above, but most of the msbuild tasks are actually in Microsoft.Common.Currentversion.targets.
    So import it when the managed targets do not get imported.
  -->
  <Import Project="$(MSBuildToolsPath)\Microsoft.Managed.targets" Condition="'$(MSBuildAssemblyVersion)' >= '16.0' And '$(ManagedLanguageTargetsGotImported)' != 'true'" />

  <Target Name="_GenerateCompileInputs" />
  <Target Name="_GenerateCompileDependencyCache" />

  <!-- Disables the _CopyFilesMarkedCopyLocal target to not copy references when SkipCopyFilesMarkedCopyLocal is set to true. -->
  <Import Project="DisableCopyFilesMarkedCopyLocal.targets" Condition="'$(SkipCopyFilesMarkedCopyLocal)' == 'true'" />

  <!-- Default build configurations -->
  <PropertyGroup>
    <WarningLevel Condition=" '$(WarningLevel)' == '' ">4</WarningLevel>
    <TreatWarningsAsErrors Condition=" '$(TreatWarningsAsErrors)' == '' ">false</TreatWarningsAsErrors>
    <BuildScriptName Condition=" '$(BuildScriptName)' == '' ">$(MSBuildProjectName).sql</BuildScriptName>
    <DefineTrace Condition=" '$(DefineTrace)' == '' ">true</DefineTrace>
    <ErrorReport Condition=" '$(ErrorReport)' == '' ">prompt</ErrorReport>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <OutputPath Condition=" '$(OutputPath)' == '' ">bin\Release\</OutputPath>
    <DebugType Condition=" '$(DebugType)' == '' ">pdbonly</DebugType>
    <Optimize Condition=" '$(Optimize)' == '' ">true</Optimize>
    <DefineDebug Condition=" '$(DefineDebug)' == '' ">false</DefineDebug>
    <DebugSymbols Condition=" '$(DebugSymbols)' == '' ">false</DebugSymbols>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <OutputPath Condition=" '$(OutputPath)' == '' ">bin\Debug\</OutputPath>
    <DebugType Condition=" '$(DebugType)' == '' ">full</DebugType>
    <Optimize Condition=" '$(Optimize)' == '' ">false</Optimize>
    <DefineDebug Condition=" '$(DefineDebug)' == '' ">true</DefineDebug>
    <DebugSymbols Condition=" '$(DebugSymbols)' == '' ">true</DebugSymbols>
  </PropertyGroup>

  <!-- Pack target properties -->
  <PropertyGroup>
    <PackageType>$(PackageType);DACPAC</PackageType>
    <IsTool Condition="'$(IsTool)' == ''">true</IsTool>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.dacpac</AllowedOutputExtensionsInPackageBuildOutputFolder>

    <!-- Suppress NU5128 since SQL NuGet Packages have no target framework dependencies -->
    <NoWarn>$(NoWarn),NU5128</NoWarn>
    <TargetFrameworks></TargetFrameworks>
    <IncludeBuildOutput>false</IncludeBuildOutput>
  </PropertyGroup>

  <!-- Publish target properties -->
  <PropertyGroup>
    <UseSqlPublish>false</UseSqlPublish>
  </PropertyGroup>

  <Target Name="CreateManifestResourceNames" />
  <!-- CoreCompile is a target inside target Build on Microsoft.Common.targets that is not implemented there but allows us to personalize our compile/build flow, while
    executing all the other targets inside Build regularly. We implement it before importing Common.targets because it's not implemented there, so it will not be
    overriden when importing the targets.
    -->
  <Target Name="CoreCompile" />

  <Import Condition="'$(NetCoreBuild)' == 'true'" Project="$(MSBuildThisFileDirectory)../tools/net8.0/Microsoft.Data.Tools.Schema.SqlTasks.targets"/>
  <Import Condition="'$(NetCoreBuild)' != 'true' AND '$(SQLDBExtensionsRefPath)' != ''" Project="$(SQLDBExtensionsRefPath)\Microsoft.Data.Tools.Schema.SqlTasks.targets" />
  <Import Condition="'$(NetCoreBuild)' != 'true' AND '$(SQLDBExtensionsRefPath)' == '' AND '$(BuildFromSSDT)' == 'false'" Project="$(MSBuildThisFileDirectory)../tools/net472/Microsoft.Data.Tools.Schema.SqlTasks.targets" />
  <Import Condition="'$(NetCoreBuild)' != 'true' AND '$(SQLDBExtensionsRefPath)' == '' AND '$(BuildFromSSDT)' != 'false'" Project="$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v$(VisualStudioVersion)\SSDT\Microsoft.Data.Tools.Schema.SqlTasks.targets" />

  <Import Condition="'$(NetCoreBuild)' != 'true' AND Exists('$(MSBuildExtensionsPath)\Sdks\Microsoft.SqlProject.Sdk\ssdtprojectsystem.targets')"
          Project="$(MSBuildExtensionsPath)\Sdks\Microsoft.SqlProject.Sdk\ssdtprojectsystem.targets" />

  <PropertyGroup>
    <SqlBuildDependsOn>$(SqlBuildDependsOn);_GenerateSqlBuildDependencyCache</SqlBuildDependsOn>
  </PropertyGroup>
  
  <ItemGroup>
    <!-- Capture SDK version in telemetry -->
    <DacFxTelemetryItems Update="$(MSBuildProjectFullPath)">
      <MicrosftBuildSqlVersion>$(MicrosoftBuildSqlVersion)</MicrosftBuildSqlVersion>
    </DacFxTelemetryItems>
  </ItemGroup>

  <!-- Override target to skip invalid .NET Framework check -->
  <Target Name="_CheckForUnsupportedTargetFrameworkAndFeatureCombination" />

  <Target Name="CheckForDuplicateSqlItems" BeforeTargets="_SetupSqlBuildInputs">

    <PropertyGroup>
      <DefaultItemsMoreInformationLink>https://aka.ms/upgrade-sqlproject#required-remove-build-items-included-by-default</DefaultItemsMoreInformationLink>
    </PropertyGroup>

    <CheckForDuplicateItems
      Items="@(Build)"
      ItemName="Build"
      DefaultItemsEnabled="$(EnableDefaultSqlItems)"
      DefaultItemsOfThisTypeEnabled="$(EnableDefaultSqlItems)"
      PropertyNameToDisableDefaultItems="EnableDefaultSqlItems"
      MoreInformationLink="$(DefaultItemsMoreInformationLink)"
      ContinueOnError="$(ContinueOnError)">
      <Output TaskParameter="DeduplicatedItems" ItemName="DeduplicatedSqlItems" />
    </CheckForDuplicateItems>

    <!-- Currently do nothing with DeduplicatedItems. There are some design time logic in Microsoft.NET.Sdk.DefaultItems.Shared.targets that we can implement in the future. -->

  </Target>

  <!-- Similar to _GenerateCompileDependencyCache in .NET SDK, this target generates a file to track dependencies between incremental build executions.
       This handles cases where items are added or removed from a glob and can't otherwise be detected with timestamp comparisons. -->
  <Target Name="_GenerateSqlBuildDependencyCache" DependsOnTargets="_SetupSqlBuildInputs">
    <ItemGroup>
      <SqlBuildInputItem Include="$(IntermediateOutputPath)SqlBuildInputs.cache" />
      <SqlBuildCache Include="@(__SqlBuildInputItem)" />
      <SqlBuildCache Include="@(__SqlScriptDependentFiles)" />
    </ItemGroup>

    <Hash ItemsToHash="@(SqlBuildCache)">
      <Output TaskParameter="HashResult" PropertyName="SqlBuildDependencyHash" />
    </Hash>

    <WriteLinesToFile Lines="$(SqlBuildDependencyHash)" File="$(IntermediateOutputPath)SqlBuildInputs.cache" Overwrite="True" WriteOnlyWhenDifferent="True" />
  </Target>

  <!-- Add dacpac file to _PackageFiles, so that it will get included in the NuGet package by the Pack target -->
  <Target Name="AddDacpacToBuiltProjectOutputGroupOutput" DependsOnTargets="Build" BeforeTargets="GenerateNuspec">
    <ItemGroup>
      <_PackageFiles Include="$(SqlTargetPath)" Pack="true" PackagePath="tools/" />
    </ItemGroup>
  </Target>

  <Target Name="AddDacpacToPublishList" BeforeTargets="ComputeResolvedFilesToPublishList">
    <ItemGroup>
      <ResolvedFileToPublish Include="$(SqlTargetPath)" RelativePath="$(SqlTargetFile)" CopyToPublishDirectory="PreserveNewest" />
    </ItemGroup>
  </Target>

  <!-- Remove files included via :r in pre/post-deployment scripts from build. Fix for https://github.com/microsoft/DacFx/issues/103 -->
  <Target Name="RemoveSqlCmdIncludeFilesFromBuild" BeforeTargets="SqlBuild" DependsOnTargets="_SetupSqlBuildInputs">
    <ItemGroup>
      <Build Remove="@(__SqlScriptDependentFiles)" MatchOnMetadata="Identity" MatchOnMetadataOptions="PathLike" />
    </ItemGroup>
  </Target>

  <ItemGroup>
    <!-- Remove files specified as PreDeploy, PostDeploy, and None scripts from build -->
    <Build Remove="@(PreDeploy)" />
    <Build Remove="@(PostDeploy)" />
    <Build Remove="@(None)" />
    <Build Remove="@(BuildExtensionConfiguration)" />
    <Build Remove="@(DeploymentExtensionConfiguration)" />
  </ItemGroup>

  <!-- Target to resolve package references into database references to the underlying DACPACs inside the packages -->
  <Target Name="ResolveDacpacPackageReferences" BeforeTargets="ResolveArtifactReferences">
    <ItemGroup>
      <_ResolvedDacpacPackageReference Include="%(PackageReference.Identity)">
        <!-- Get the resolved package path property in the format generated by Nuget restore -->
        <!-- https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Commands/RestoreCommand/Utility/BuildAssetsUtils.cs#L763 -->
        <PackageId>@(PackageReference->'%(Identity)'->Replace('.', '_'))</PackageId>
        <PackagePath>$(Pkg%(_ResolvedDacpacPackageReference.PackageId))</PackagePath>
        <IsSystemDacpac>@(PackageReference->'%(Identity)'->StartsWith('microsoft.sqlserver.dacpacs', StringComparison.OrdinalIgnoreCase))</IsSystemDacpac>
        <IsMasterDacpac Condition="'%(_ResolvedDacpacPackageReference.IsSystemDacpac)' == 'true'">@(PackageReference->'%(Identity)'->EndsWith('master', StringComparison.OrdinalIgnoreCase))</IsMasterDacpac>
        <IsMsdbDacpac Condition="'%(_ResolvedDacpacPackageReference.IsSystemDacpac)' == 'true'">@(PackageReference->'%(Identity)'->EndsWith('msdb', StringComparison.OrdinalIgnoreCase))</IsMsdbDacpac>

        <!-- File name of the dacpac inside the package -->
        <DacpacName>%(PackageReference.DacpacName)</DacpacName>
        <DacpacName Condition="'%(_ResolvedDacpacPackageReference.DacpacName)' == '' And '%(_ResolvedDacpacPackageReference.IsMasterDacpac)' == 'true'">master</DacpacName>
        <DacpacName Condition="'%(_ResolvedDacpacPackageReference.DacpacName)' == '' And '%(_ResolvedDacpacPackageReference.IsMsdbDacpac)' == 'true'">msdb</DacpacName>
        <!-- Default to master for backwards compatibility with first versions of Microsoft.SqlServer.Dacpacs -->
        <DacpacName Condition="'%(_ResolvedDacpacPackageReference.DacpacName)' == '' And '%(_ResolvedDacpacPackageReference.IsSystemDacpac)' == 'true'">master</DacpacName>
        <DacpacName Condition="'%(_ResolvedDacpacPackageReference.DacpacName)' == ''">%(PackageReference.Identity)</DacpacName>

        <!-- Full resolved path to the dacpac file -->
        <HintPath>%(PackageReference.HintPath)</HintPath>
        <HintPath Condition="'%(_ResolvedDacpacPackageReference.HintPath)' == ''">%(_ResolvedDacpacPackageReference.PackagePath)/tools/%(_ResolvedDacpacPackageReference.DacpacName).dacpac</HintPath>

        <ServerSqlCmdVariable>%(PackageReference.ServerSqlCmdVariable)</ServerSqlCmdVariable>
        <DatabaseSqlCmdVariable>%(PackageReference.DatabaseSqlCmdVariable)</DatabaseSqlCmdVariable>
        <DatabaseVariableLiteralValue>%(PackageReference.DatabaseVariableLiteralValue)</DatabaseVariableLiteralValue>
        <DatabaseVariableLiteralValue Condition="'%(_ResolvedDacpacPackageReference.DatabaseVariableLiteralValue)' == '' And '%(_ResolvedDacpacPackageReference.IsMasterDacpac)' == 'true'">master</DatabaseVariableLiteralValue>
        <DatabaseVariableLiteralValue Condition="'%(_ResolvedDacpacPackageReference.DatabaseVariableLiteralValue)' == '' And '%(_ResolvedDacpacPackageReference.IsMsdbDacpac)' == 'true'">msdb</DatabaseVariableLiteralValue>
        <SuppressMissingDependenciesErrors>%(PackageReference.SuppressMissingDependenciesErrors)</SuppressMissingDependenciesErrors>
      </_ResolvedDacpacPackageReference>

      <ArtifactReference Include="@(_ResolvedDacpacPackageReference->'%(HintPath)')" Condition="Exists(%(_ResolvedDacpacPackageReference.HintPath))" />
    </ItemGroup>
  </Target>

  <UsingTask TaskName="VersionCheckTask" AssemblyFile="$(SdkBinariesPath)\Microsoft.Build.Sql.dll" Condition="'$(SkipCheckForNewSDKVersion)' != 'true'" />
  <Target Name="CheckForNewSDKVersion" BeforeTargets="Restore" Condition="'$(SkipCheckForNewSDKVersion)' != 'true'">
    <VersionCheckTask Version="$(MicrosoftBuildSqlVersion)" />
  </Target>

  <!-- Default properties to be evaluated last -->
  <PropertyGroup>
    <EnableDefaultSqlItems Condition=" '$(EnableDefaultSqlItems)' == '' ">true</EnableDefaultSqlItems>
    <DefaultSqlItemExcludes>$(DefaultSqlItemExcludes);$(BaseOutputPath)/**;$(BaseIntermediateOutputPath)/**</DefaultSqlItemExcludes> 
  </PropertyGroup>
</Project>
